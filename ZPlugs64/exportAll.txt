////
// varibales for ZFileUtils
[VarDef,Zvers, 0]
[VarDef,isMac, 0]
[VarDef,separator, ""]
[VarDef,dllPath, ""]
[VarDef,dllVersion]
[VarDef,minDllVersion]
// variables for our plugins
[VarDef,pluginDllPath, ""]
// variable for localization
[VarDef,enLangFilePath, ""]
// path to directory of this plugin
[VarDef,rootPath, ""]
[VarDef,rootPathWithoutPrefix, ""]
[VarDef,tmpValue, 0]
// variable for export
[VarDef,subTName, ""]
[VarDef,activeSubT, ""]
[VarDef,activeSubTName, ""]
// variable for json string
[VarDef, quote, [StrFromAsc, 34]]
[MemCreate, jsonMem, 1024]
[MemCreate, workingMem, 1024]
[VarDef, bytesWritten, 0]
//create memblock to get the path
[MemCreate,MC_FolderPath,256,0]
[VarDef,folderPath,""]
[VarDef,result]


//////
// search dlls
// from http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/zfileutils/#dllPath
[RoutineDef, CheckSystem,	
    //check ZBrush version
    [VarSet,Zvers,[ZBrushInfo,0]]
    [If,[Val,Zvers] >= 2021.0,,	
        [Note,"\Cff9923This zscript\Cffffff is not designed for this version of 
            \Cff9923ZBrush\Cffffff.",,3,4737096,,300]
        [Exit]
    ]
    [VarSet,isMac, [ZBrushInfo,6]]	//check Mac or PC
                                    // Make sure we have the dll and set its path
    [If,[ZBrushInfo,16]==64,//64 bit
        [If,isMac,
            //use the path below for testing only
            // [VarSet,rootPath,"exportAll_2022/"]
            //use the path below for installed plugins
            [VarSet,rootPath,"ZBRUSH_ZSTARTUP/ZPlugs64/exportAll_2022/"]
            [VarSet, rootPath, [FileNameResolvePath, #rootPath]]
            // for macOS, we remove first two characters ("!:")
            [VarSet, rootPathWithoutPrefix, [StrExtract, #rootPath, 2, [StrLength, #rootPath] - 1]]

            [VarSet,dllPath,[StrMerge, #rootPath,"ZFileUtils.lib"]]
            [VarSet,pluginDllPath,[StrMerge, #rootPath,"convert.lib"]]
            [VarSet,enLangFilePath,[StrMerge, #rootPath,"lang/exportAll_2022_en.xml"]]
            [VarSet,separator,"/"]
        ,
            //use the path below for testing only
            // [VarSet,rootPath,"exportAll_2022/"]
            //use the path below for installed plugins
            [VarSet,rootPath,"ZBRUSH_ZSTARTUP/ZPlugs64/exportAll_2022/"]
            [VarSet, rootPath, [FileNameResolvePath, #rootPath]]
            [Loop, [StrLength, rootPath],
                [VarSet, tmpValue, [StrFind, "\", rootPath]]
                [If, #tmpValue > -1,
                    [VarSet, rootPath, [StrMerge, [StrExtract, rootPath, 0, tmpValue-1], "/", [StrExtract, rootPath, tmpValue+1, [StrLength, rootPath]-1]]],
                    [LoopExit]
                ]
            ]
            [VarSet, rootPathWithoutPrefix, #rootPath]

            [VarSet,dllPath,[StrMerge, #rootPath,"ZFileUtils64.dll"]]
            [VarSet,pluginDllPath,[StrMerge, #rootPath,"convert.dll"]]
            [VarSet,enLangFilePath,[StrMerge, #rootPath,"lang/exportAll_2022_en.xml"]]
            [VarSet,separator,"/"]
        ]
    ,//else 32 bit - no longer supported
        [Note,"\Cff9923This zscript\Cffffff is not designed for this version of 
            \Cff9923ZBrush\Cffffff.",,3,4737096,,300]
        [Exit]
    ]

    [If, [FileExists, [Var,dllPath]] && [FileExists, [Var,pluginDllPath]] && [FileExists, [Var,enLangFilePath]],
        //check that correct version
        [VarSet, dllVersion, [FileExecute, [Var,dllPath], Version]]
        [If,isMac,
            // for macOS, latest ZFileUtils is 4.8
            [VarSet, minDllVersion, 4.8]
            ,
            [VarSet, minDllVersion, 8.0]
        ]
        [If, #dllVersion >= #minDllVersion,//dll version
            //OK
        ,//else earlier version
            [Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 ZFileUtils plugin \CffffffDLL\Cc0c0c0 is 
                an earlier version which does not support this plugin.  Please install correct version."]
            [Exit]
        ]
    , // else no DLL.
        [Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 ZFileUtils plugin \CffffffDLL\Cc0c0c0 could
            not be found at the correct location.  Please re-install the plugin, making sure the 
            relevant files and folders are in the \CffffffZStartup/ZPlugs\Cc0c0c0 folder."]
        [Exit]
    ]
]
//////

//////
// translation routine
// from http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/zfileutils/localization/
[RoutineDef, ZFU_RegisterLocalizationFile,
	[FileExecute, #dllPath, RegisterLocalizationFile, enFilePath]
, enFilePath]
//////

//////
// write str to mem (+ auto-resize)
// note that strFragment must < 255 chars
[RoutineDef, writeStrFragmentToJsonMem,
    [If, [StrLength, strFragment]+#bytesWritten > [MemGetSize, jsonMem],
        [MemCopy, jsonMem, 0, workingMem, 0, #bytesWritten]
        [MemResize, jsonMem, [MemGetSize, jsonMem]+1024]
        [MemCopy, workingMem, 0, jsonMem, 0, #bytesWritten]
        [MemResize, workingMem, [MemGetSize, jsonMem]]
    ]
    [MemWriteString, jsonMem, strFragment, #bytesWritten]
    [VarAdd, bytesWritten, [StrLength, strFragment]]
, strFragment]

//////
// startup
[RoutineCall, CheckSystem]
[RoutineCall, ZFU_RegisterLocalizationFile, [FileNameResolvePath, #enLangFilePath]]

//////
// UI
// button for offset
[ISubPalette, "ZPlugin:Export All"]

////
// format
[ISwitch, "ZPlugin:Export All:*.obj", 0, "OBJ Format", 
    [ILock, "ZPlugin:Export All:*.obj"]
    [IUnlock, "ZPlugin:Export All:*.mesh"]
    [IUnlock, "ZPlugin:Export All:*.ply"]
    [IUnlock, "ZPlugin:Export All:*.stl"]
    [IUnlock, "ZPlugin:Export All:*.wrl"]
    [IUnlock, "ZPlugin:Export All:*.off"]

    [IUnPress, "ZPlugin:Export All:*.mesh"]
    [IUnPress, "ZPlugin:Export All:*.ply"]
    [IUnPress, "ZPlugin:Export All:*.stl"]
    [IUnPress, "ZPlugin:Export All:*.wrl"]
    [IUnPress, "ZPlugin:Export All:*.off"]

    [IPress, "ZPlugin:Export All:ASCII"]
    [IDisable, "ZPlugin:Export All:Bin"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:*.mesh", 0, "Mesh ascii File",
    [IUnlock, "ZPlugin:Export All:*.obj"]
    [ILock, "ZPlugin:Export All:*.mesh"]
    [IUnlock, "ZPlugin:Export All:*.ply"]
    [IUnlock, "ZPlugin:Export All:*.stl"]
    [IUnlock, "ZPlugin:Export All:*.wrl"]
    [IUnlock, "ZPlugin:Export All:*.off"]

    [IUnPress, "ZPlugin:Export All:*.obj"]
    [IUnPress, "ZPlugin:Export All:*.ply"]
    [IUnPress, "ZPlugin:Export All:*.stl"]
    [IUnPress, "ZPlugin:Export All:*.wrl"]
    [IUnPress, "ZPlugin:Export All:*.off"]

    [IPress, "ZPlugin:Export All:ASCII"]
    [IDisable, "ZPlugin:Export All:Bin"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:*.ply", 1, "PLY",
    [IEnable, "ZPlugin:Export All:Bin"]

    [IUnlock, "ZPlugin:Export All:*.obj"]
    [IUnlock, "ZPlugin:Export All:*.mesh"]
    [ILock, "ZPlugin:Export All:*.ply"]
    [IUnlock, "ZPlugin:Export All:*.stl"]
    [IUnlock, "ZPlugin:Export All:*.wrl"]
    [IUnlock, "ZPlugin:Export All:*.off"]

    [IUnPress, "ZPlugin:Export All:*.obj"]
    [IUnPress, "ZPlugin:Export All:*.mesh"]
    [IUnPress, "ZPlugin:Export All:*.stl"]
    [IUnPress, "ZPlugin:Export All:*.wrl"]
    [IUnPress, "ZPlugin:Export All:*.off"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:*.stl", 0, "STL",
    [IEnable, "ZPlugin:Export All:Bin"]

    [IUnlock, "ZPlugin:Export All:*.obj"]
    [IUnlock, "ZPlugin:Export All:*.mesh"]
    [IUnlock, "ZPlugin:Export All:*.ply"]
    [ILock, "ZPlugin:Export All:*.stl"]
    [IUnlock, "ZPlugin:Export All:*.wrl"]
    [IUnlock, "ZPlugin:Export All:*.off"]

    [IUnPress, "ZPlugin:Export All:*.obj"]
    [IUnPress, "ZPlugin:Export All:*.mesh"]
    [IUnPress, "ZPlugin:Export All:*.ply"]
    [IUnPress, "ZPlugin:Export All:*.wrl"]
    [IUnPress, "ZPlugin:Export All:*.off"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:*.wrl", 0, "VRML",
    [IUnlock, "ZPlugin:Export All:*.obj"]
    [IUnlock, "ZPlugin:Export All:*.mesh"]
    [IUnlock, "ZPlugin:Export All:*.ply"]
    [IUnlock, "ZPlugin:Export All:*.stl"]
    [ILock, "ZPlugin:Export All:*.wrl"]
    [IUnlock, "ZPlugin:Export All:*.off"]

    [IUnPress, "ZPlugin:Export All:*.obj"]
    [IUnPress, "ZPlugin:Export All:*.mesh"]
    [IUnPress, "ZPlugin:Export All:*.ply"]
    [IUnPress, "ZPlugin:Export All:*.stl"]
    [IUnPress, "ZPlugin:Export All:*.off"]

    [IPress, "ZPlugin:Export All:ASCII"]
    [IDisable, "ZPlugin:Export All:Bin"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:*.off", 0, "OFF", 
    [IUnlock, "ZPlugin:Export All:*.obj"]
    [IUnlock, "ZPlugin:Export All:*.mesh"]
    [IUnlock, "ZPlugin:Export All:*.ply"]
    [IUnlock, "ZPlugin:Export All:*.stl"]
    [IUnlock, "ZPlugin:Export All:*.wrl"]
    [ILock, "ZPlugin:Export All:*.off"]

    [IUnPress, "ZPlugin:Export All:*.obj"]
    [IUnPress, "ZPlugin:Export All:*.mesh"]
    [IUnPress, "ZPlugin:Export All:*.ply"]
    [IUnPress, "ZPlugin:Export All:*.stl"]
    [IUnPress, "ZPlugin:Export All:*.wrl"]

    [IPress, "ZPlugin:Export All:ASCII"]
    [IDisable, "ZPlugin:Export All:Bin"]
 , , , 0.33]

////
// selected/visible/all
[ISwitch, "ZPlugin:Export All:Selected", 0, "Export selected subtool",
    [ILock, "ZPlugin:Export All:Selected"]
    [IUnlock, "ZPlugin:Export All:Visible"]
    [IUnlock, "ZPlugin:Export All:All"]

    [IUnPress, "ZPlugin:Export All:Visible"]
    [IUnPress, "ZPlugin:Export All:All"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:Visible", 1, "Export visible subtools",
    [IUnlock, "ZPlugin:Export All:Selected"]
    [ILock, "ZPlugin:Export All:Visible"]
    [IUnlock, "ZPlugin:Export All:All"]

    [IUnPress, "ZPlugin:Export All:Selected"]
    [IUnPress, "ZPlugin:Export All:All"]
 , , , 0.33]
[ISwitch, "ZPlugin:Export All:All", 0, "Export all subtools",
    [IUnlock, "ZPlugin:Export All:Selected"]
    [IUnlock, "ZPlugin:Export All:Visible"]
    [ILock, "ZPlugin:Export All:All"]

    [IUnPress, "ZPlugin:Export All:Selected"]
    [IUnPress, "ZPlugin:Export All:Visible"]
 , , , 0.33]

// separate?
[ISwitch, "ZPlugin:Export All:Separate Files", 1, "Export as separate files", , , , 1.0]

// bin/ascii
[ISwitch, "ZPlugin:Export All:Bin", 1, "Binary file",
    [ILock, "ZPlugin:Export All:Bin"]
    [IUnlock, "ZPlugin:Export All:ASCII"]

    [IUnPress, "ZPlugin:Export All:ASCII"]
 , , , 0.5]
[ISwitch, "ZPlugin:Export All:ASCII", 0, "ASCII file",
    [IUnlock, "ZPlugin:Export All:Bin"]
    [ILock, "ZPlugin:Export All:ASCII"]

    [IUnPress, "ZPlugin:Export All:Bin"]
 , , , 0.5]



[IButton, "ZPlugin:Export All:Export", "Export", 
    [IFreeze,
        ////
        // pick directory
        [VarSet,err,[FileExecute, [Var,dllPath],ChooseFolder,,,MC_FolderPath]]
        [If,err,
            [Note,err]//function will return -1 if no folder chosen
            [Exit]
        ]

        //copy path from memblock to variable
        [MemReadString,MC_FolderPath,folderPath,0,1]
        //show the selected folder path
        //*** when using the path remember to append a slash before the file name!***
        //*** for example:
        //[VarSet,filePath,"My_Model.ztl"]
        //[FileNameSetNext,[StrMerge,folderPath,"/",filePath]]

        ////
        // export to GoZ file
        [VarSet, activeSubT, [SubToolGetActiveIndex]]
        [VarSet, subToolCount, [SubToolGetCount]]


        [If, [IGet, "ZPlugin:Export All:Selected"],
            [VarSet, subTName, [IGetTitle,Tool:ItemInfo]]
            [VarSet, activeSubTName, [StrExtract, #subTName, 0, [StrLength, #subTName]-2]]
            [FileNameSetNext, [StrMerge, #rootPath, #separator, "data", #separator, #activeSubTName, ".GoZ"]]
            [IPress,Tool:Export]
        ]
        [If, [IGet, "ZPlugin:Export All:Visible"],
            [Loop,subToolCount,
                [SubToolSelect, subtoolIdx]
                [VarSet, subTStatus, [SubToolGetStatus]]
                [If, (subTStatus & 0x01),
                    [VarSet, subTName, [IGetTitle,Tool:ItemInfo]]
                    [VarSet, activeSubTName, [StrExtract, #subTName, 0, [StrLength, #subTName]-2]]
                    [FileNameSetNext, [StrMerge, #rootPath, #separator, "data", #separator, #activeSubTName, ".GoZ"]]
                    [IPress,Tool:Export]
                ]
            , subtoolIdx]
        ]
        [If, [IGet, "ZPlugin:Export All:All"],
            [Loop,subToolCount,
                [SubToolSelect, subtoolIdx]
                [VarSet, subTName, [IGetTitle,Tool:ItemInfo]]
                [VarSet, activeSubTName, [StrExtract, #subTName, 0, [StrLength, #subTName]-2]]
                [FileNameSetNext, [StrMerge, #rootPath, #separator, "data", #separator, #activeSubTName, ".GoZ"]]
                [IPress,Tool:Export]
            , subtoolIdx]
        ]
        [SubToolSelect, activeSubT]

        ////
        // generate JSON string
        [RoutineCall, writeStrFragmentToJsonMem, "{"]
            // rootPath (<rootPath>/data is used)
            [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "root", #quote, ":", #quote, #rootPathWithoutPrefix, #quote, ","]]

            // cleanup folderPath
            [Loop, [StrLength, folderPath],
                [VarSet, tmpValue, [StrFind, "\", folderPath]]
                [If, #tmpValue > -1,
                    [VarSet, folderPath, [StrMerge, [StrExtract, folderPath, 0, tmpValue-1], "/", [StrExtract, folderPath, tmpValue+1, [StrLength, folderPath]-1]]],
                    [LoopExit]
                ]
            ]
            // targetDirectory (directory that meshes will be exported into)
            [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "targetDirectory", #quote, ":", 
            #quote, #folderPath, #quote, ","]]

            // format
            [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "format", #quote, ":"]]
            [If, [IGet, "ZPlugin:Export All:*.obj"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, ".obj", #quote, ","]]
            ]
            [If, [IGet, "ZPlugin:Export All:*.mesh"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, ".mesh", #quote, ","]]
            ]
            [If, [IGet, "ZPlugin:Export All:*.ply"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, ".ply", #quote, ","]]
            ]
            [If, [IGet, "ZPlugin:Export All:*.stl"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, ".stl", #quote, ","]]
            ]
            [If, [IGet, "ZPlugin:Export All:*.wrl"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, ".wrl", #quote, ","]]
            ]
            [If, [IGet, "ZPlugin:Export All:*.off"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, ".off", #quote, ","]]
            ]

            // separate?
            [If, [IGet, "ZPlugin:Export All:Separate Files"],
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "separate", #quote, ":", "true", ","]]
                ,
                [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "separate", #quote, ":", "false", ","]]
            ]

            // activeSubTName (if exported into single file)
            [VarSet, subTName, [IGetTitle,Tool:ItemInfo]]
            [VarSet, activeSubTName, [StrExtract, #subTName, 0, [StrLength, #subTName]-2]]
            [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "activeSubTName", #quote, ":", #quote, #activeSubTName, #quote, ","]]

            // bin/ascii
            [RoutineCall, writeStrFragmentToJsonMem, [StrMerge, #quote, "bin", #quote, ":"]]
            [If, [IGet, "ZPlugin:Export All:Bin"],
                [RoutineCall, writeStrFragmentToJsonMem, "true"]
                ,
                [RoutineCall, writeStrFragmentToJsonMem, "false"]
            ]
        [RoutineCall, writeStrFragmentToJsonMem, "}"]

        [MemResize, workingMem, #bytesWritten]
        [MemCopy, jsonMem, 0, workingMem, 0, #bytesWritten]
        [MemSaveToFile, workingMem, [StrMerge, #rootPath, #separator, "data", #separator, "parameters.txt"], 1]
        [MemResize, jsonMem, 1024]
        [MemResize, workingMem, 1024]
        [VarSet, bytesWritten, 0]

        ////
        // call dll function
        [VarSet, result, [FileExecute, #pluginDllPath, "convert", [StrMerge, #rootPathWithoutPrefix, #separator, "data", #separator, "parameters.txt"]]]
    ]
    [If, result,
        [Note, "Export completed."]
    ,
        [Note, "Sorry, there is some error..."]
    ]

, 0, 1.0,]

[IEnable, "ZPlugin:Export All:*.obj"]
[IEnable, "ZPlugin:Export All:*.mesh"]
[IEnable, "ZPlugin:Export All:*.ply"]
[IEnable, "ZPlugin:Export All:*.stl"]
[IEnable, "ZPlugin:Export All:*.wrl"]
[IEnable, "ZPlugin:Export All:*.wrl"]
[IEnable, "ZPlugin:Export All:Selected"]
[IEnable, "ZPlugin:Export All:Visible"]
[IEnable, "ZPlugin:Export All:All"]
[IEnable, "ZPlugin:Export All:Separate Files"]
[IEnable, "ZPlugin:Export All:Bin"]
[IEnable, "ZPlugin:Export All:ASCII"]

[ILock, "ZPlugin:Export All:*.ply"]
[ILock, "ZPlugin:Export All:Visible"]
[ILock, "ZPlugin:Export All:Bin"]
